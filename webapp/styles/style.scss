/* To prevent this building block's CSS from having unintentional effects, put
 * it all under the wrapping ng-app div's class. One reason for using SASS is
 * the easy way that we can specify nested rules. In this example, every rule
 * is nested under the TemplateApp class without having to respecify the
 * TemplateApp selector for every rule. */
.TemplateApp
{
	/* SASS lets you declare variables, these are scoped to .TemplateApp */
	$successColor: green;
	$processingColor: royalblue;
	$errorColor: firebrick;

	/* The username form */
	input[type="text"]
	{
		padding: 0.3em;
		border: 1px solid #aaa;
	}
	form
	{
		margin-bottom: 1em;
	}
	/* The user information display */
	dl
	{
		width: 30em;
	}
	dt 
	{
		display: inline-block;
		width: 9em;
		padding-right: 1em;
		text-align: right;
	}
	dd
	{
		width: 20em;
		display: inline-block;
		clear: right;
	}
	/* The status indicators for the form submit */
	span
	{
		padding: 0.5em;
		color: white;
		/* & is replaced with the parent, in this case, it compiles to
		 * "span.working". Without the &, it compiles to "span .working", the
		 * only difference is the space between span and .working which gives
		 * them different CSS meanings. */
		&.processing
		{
			background-color: $processingColor;
		}
		&.success
		{
			background-color: $successColor;
		}
		&.error
		{
			background-color: $errorColor;
		}
	}
}
